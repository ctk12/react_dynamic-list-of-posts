{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","api/posts.ts","api/comments.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","userPosts","onOpenPost","currentPost","className","map","post","id","title","iscurrentPost","type","classNames","onClick","Loader","NewCommentForm","addComment","useState","name","setName","email","setEmail","text","setText","isNameEmpty","setIsNameEmpty","isEmailEmpty","setIsEmailEmpty","isTextEmpty","setIsTextEmpty","isButtonLoading","setIsButtonLoading","clearText","onSubmit","e","preventDefault","newComment","body","htmlFor","placeholder","value","onChange","target","PostDetails","postComments","isCommentLoading","isCommentLoadingError","isNoComments","setIsNewCommentForm","isNewCommentForm","commentDelete","length","comment","href","UserSelector","users","selectUser","selectedUser","isChoosing","setIsChoosing","state","onBlur","role","user","onMouseDown","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","getUserPosts","userId","getPostComments","postId","addNewComment","deleteComment","commentId","tempUser","phone","tempPost","App","setUsers","setSelectedUser","setUserPosts","isPostLoading","setIsPostLoading","isPostLoadingError","setIsPostLoadingError","isNoPosts","setIsNoPosts","setcurrentPost","setPostComments","setIsCommentLoading","setIsCommentLoadingError","setIsNoComments","loadUsers","a","loadedUsers","loadUserPosts","loadedUserPosts","loadPostComments","loadedPostComments","sendData","addedComment","filter","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53ab60ea.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[];\n  onOpenPost: (post: Post) => void,\n  currentPost: Post,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  onOpenPost,\n  currentPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map((post) => {\n            const { id, title } = post;\n            const iscurrentPost = currentPost.id !== id;\n\n            return (\n              <tr\n                key={id}\n                data-cy=\"Post\"\n              >\n                <td data-cy=\"PostId\">{id}</td>\n                <td data-cy=\"PostTitle\">{title}</td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      { 'is-light': iscurrentPost },\n                    )}\n                    onClick={() => onOpenPost(post)}\n                  >\n                    {iscurrentPost\n                      ? 'Open'\n                      : 'Close'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { FormEvent, useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype SendDataType = {\n  newComment: CommentData,\n  setIsButtonLoading: (IsButtonLoading: boolean) => void,\n  clearText: () => void,\n};\n\ntype Props = {\n  addComment: (sendData: SendDataType) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n  const [isNameEmpty, setIsNameEmpty] = useState(false);\n  const [isEmailEmpty, setIsEmailEmpty] = useState(false);\n  const [isTextEmpty, setIsTextEmpty] = useState(false);\n  const [isButtonLoading, setIsButtonLoading] = useState(false);\n\n  const clearText = () => setText('');\n\n  const onSubmitNewComment = (e: FormEvent) => {\n    e.preventDefault();\n    setIsButtonLoading(true);\n\n    if (!name) {\n      setIsNameEmpty(true);\n      setIsButtonLoading(false);\n    }\n\n    if (!email) {\n      setIsEmailEmpty(true);\n      setIsButtonLoading(false);\n    }\n\n    if (!text) {\n      setIsTextEmpty(true);\n      setIsButtonLoading(false);\n    }\n\n    if (name && email && text) {\n      const newComment = {\n        name,\n        email,\n        body: text,\n      };\n\n      const sendData = {\n        newComment,\n        setIsButtonLoading,\n        clearText,\n      };\n\n      addComment(sendData);\n    }\n  };\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setText('');\n\n    if (isNameEmpty) {\n      setIsNameEmpty(false);\n    }\n\n    if (isEmailEmpty) {\n      setIsEmailEmpty(false);\n    }\n\n    if (isTextEmpty) {\n      setIsTextEmpty(false);\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={onSubmitNewComment}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isNameEmpty },\n            )}\n            value={name}\n            onChange={(e) => {\n              if (e.target.value && isNameEmpty) {\n                setIsNameEmpty(false);\n              }\n\n              setName(e.target.value);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameEmpty && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmailEmpty },\n            )}\n            value={email}\n            onChange={(e) => {\n              if (e.target.value && isEmailEmpty) {\n                setIsEmailEmpty(false);\n              }\n\n              setEmail(e.target.value);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailEmpty && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isTextEmpty },\n            )}\n            value={text}\n            onChange={(e) => {\n              if (e.target.value && isTextEmpty) {\n                setIsTextEmpty(false);\n              }\n\n              setText(e.target.value);\n            }}\n          />\n        </div>\n\n        {isTextEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isButtonLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => clearForm()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\ntype SendDataType = {\n  newComment: CommentData,\n  setIsButtonLoading: (IsButtonLoading: boolean) => void,\n  clearText: () => void,\n};\n\ntype Props = {\n  currentPost: Post;\n  postComments: Comment[];\n  isCommentLoading: boolean,\n  isCommentLoadingError: boolean,\n  isNoComments: boolean,\n  setIsNewCommentForm: (newCommentForm: boolean) => void,\n  isNewCommentForm: boolean,\n  addComment: (sendData: SendDataType) => void,\n  commentDelete: (commentId: number) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  currentPost,\n  postComments,\n  isCommentLoading,\n  isCommentLoadingError,\n  isNoComments,\n  setIsNewCommentForm,\n  isNewCommentForm,\n  addComment,\n  commentDelete,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${currentPost.id}: ${currentPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {currentPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {!isCommentLoadingError && isCommentLoading && <Loader />}\n\n          {isCommentLoadingError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n          {!isCommentLoadingError && isNoComments\n          && postComments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isCommentLoadingError && postComments.length !== 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {postComments.map((comment) => {\n                const {\n                  id,\n                  name,\n                  email,\n                  body,\n                } = comment;\n\n                return (\n                  <article\n                    key={id}\n                    className=\"message is-small is-loading\"\n                    data-cy=\"Comment\"\n                  >\n                    <div className=\"message-header\">\n                      <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => commentDelete(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n\n          {!isCommentLoadingError && !isNewCommentForm && !isCommentLoading && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsNewCommentForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {!isCommentLoadingError && isNewCommentForm\n        && (\n          <NewCommentForm\n            addComment={addComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype PropsType = {\n  users: User[];\n  selectUser: (user: User) => void;\n  selectedUser: User;\n};\n\nexport const UserSelector: React.FC<PropsType> = ({\n  users,\n  selectUser,\n  selectedUser,\n}) => {\n  const [isChoosing, setIsChoosing] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isChoosing },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsChoosing(state => !state)}\n          onBlur={() => setIsChoosing(false)}\n        >\n          {selectedUser.id !== 0\n            ? (\n              <span>{selectedUser.name}</span>\n\n            )\n            : (\n              <span>Choose a user</span>\n\n            )}\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => {\n            const { id } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': selectedUser.id === id },\n                )}\n                onMouseDown={() => selectUser(user)}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addNewComment = (newComment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', newComment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getAllUsers } from './api/users';\nimport { User } from './types/User';\nimport { getUserPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { Comment, CommentData } from './types/Comment';\nimport { getPostComments, addNewComment, deleteComment } from './api/comments';\n\nconst tempUser = {\n  id: 0,\n  name: '',\n  email: '',\n  phone: '',\n};\n\nconst tempPost = {\n  id: 0,\n  userId: 0,\n  title: '',\n  body: '',\n};\n\ntype SendDataType = {\n  newComment: CommentData,\n  setIsButtonLoading: (IsButtonLoading: boolean) => void,\n  clearText: () => void,\n};\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User>(tempUser);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isPostLoading, setIsPostLoading] = useState(false);\n  const [isPostLoadingError, setIsPostLoadingError] = useState(false);\n  const [isNoPosts, setIsNoPosts] = useState(false);\n  const [currentPost, setcurrentPost] = useState<Post>(tempPost);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n  const [isCommentLoadingError, setIsCommentLoadingError] = useState(false);\n  const [isNoComments, setIsNoComments] = useState(false);\n  const [isNewCommentForm, setIsNewCommentForm] = useState(false);\n\n  const loadUsers = async () => {\n    const loadedUsers = await getAllUsers();\n\n    if (loadedUsers) {\n      setUsers(loadedUsers);\n    }\n  };\n\n  const loadUserPosts = async (userId: number) => {\n    setUserPosts([]);\n\n    try {\n      const loadedUserPosts = await getUserPosts(userId);\n\n      if (loadedUserPosts.length !== 0) {\n        setUserPosts(loadedUserPosts);\n      } else {\n        setIsNoPosts(true);\n      }\n    } catch {\n      setIsPostLoadingError(true);\n      setUserPosts([]);\n    } finally {\n      setIsPostLoading(false);\n    }\n  };\n\n  const loadPostComments = async (postId: number) => {\n    try {\n      const loadedPostComments = await getPostComments(postId);\n\n      if (loadedPostComments.length !== 0) {\n        setPostComments(loadedPostComments);\n      } else {\n        setIsNoComments(true);\n      }\n    } catch {\n      setIsCommentLoadingError(true);\n    } finally {\n      setIsCommentLoading(false);\n    }\n  };\n\n  const addComment = async (sendData: SendDataType) => {\n    const { newComment, setIsButtonLoading, clearText } = sendData;\n\n    try {\n      const addedComment = await addNewComment({\n        postId: currentPost.id,\n        ...newComment,\n      });\n\n      if (addedComment) {\n        setIsButtonLoading(false);\n        clearText();\n        setPostComments((state) => {\n          return [...state, addedComment];\n        });\n      }\n    } catch {\n      setIsButtonLoading(false);\n      setIsCommentLoadingError(true);\n    }\n  };\n\n  const commentDelete = async (commentId: number) => {\n    if (postComments.length === 1) {\n      setIsNoComments(true);\n      setPostComments([]);\n    } else {\n      setPostComments(state => {\n        return state.filter(comment => comment.id !== commentId);\n      });\n    }\n\n    try {\n      await deleteComment(commentId);\n    } catch {\n      setIsCommentLoadingError(true);\n    }\n  };\n\n  const selectUser = (user: User) => {\n    setIsNoPosts(false);\n    setIsPostLoadingError(false);\n    setSelectedUser(user);\n    setcurrentPost(tempPost);\n    loadUserPosts(user.id);\n    setIsPostLoading(true);\n  };\n\n  const onOpenPost = (post: Post) => {\n    setPostComments([]);\n    setIsNoComments(false);\n    setIsCommentLoadingError(false);\n    setIsNewCommentForm(false);\n\n    if (post.id === currentPost.id) {\n      setcurrentPost(tempPost);\n    } else {\n      setcurrentPost(tempPost);\n      setcurrentPost(post);\n      loadPostComments(post.id);\n      setIsCommentLoading(true);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectUser={selectUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUser.id === 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isPostLoading && <Loader />}\n\n                {isPostLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {isNoPosts && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {!isPostLoadingError && userPosts.length !== 0 && (\n                  <PostsList\n                    userPosts={userPosts}\n                    onOpenPost={onOpenPost}\n                    currentPost={currentPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': currentPost.id !== 0 },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {currentPost.id !== 0 && (\n                <PostDetails\n                  currentPost={currentPost}\n                  postComments={postComments}\n                  isCommentLoading={isCommentLoading}\n                  isCommentLoadingError={isCommentLoadingError}\n                  isNoComments={isNoComments}\n                  setIsNewCommentForm={setIsNewCommentForm}\n                  isNewCommentForm={isNewCommentForm}\n                  addComment={addComment}\n                  commentDelete={commentDelete}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getAllUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}